package decisionTree;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class OneTreeTestKernel extends Kernel{

	private static int nFeatures = 4;
	public OneTreeTestKernel(KernelParameters parameters){
		super(parameters);

		DFEVar[] X = new DFEVar[nFeatures];
		for(int i = 0; i < nFeatures; i++){
			X[i] = io.input("X"+i, dfeFloat(8, 24));
			X[i].simWatch("X"+i);
		}

		JSONParser parser = new JSONParser();
		int[] features = new int[1];
		int[] childrenLeft = new int[1];
		int[] childrenRight = new int[1];
		double[] thresholds = new double[1];
		double[] values = new double[1];
		try {
			Object obj = parser.parse(new FileReader("/home/sioni/tmtt_analysis/fakereduction/testjson.txt"));
			JSONObject jsonObj = (JSONObject) obj;
			JSONArray Jfeatures = (JSONArray) jsonObj.get("features");
			JSONArray JchildrenLeft = (JSONArray) jsonObj.get("childrenLeft");
			JSONArray JchildrenRight = (JSONArray) jsonObj.get("childrenRight");
			JSONArray Jvalues = (JSONArray) jsonObj.get("values");
			JSONArray Jthresholds = (JSONArray) jsonObj.get("thresholds");
			int nNodes = Jfeatures.size();
			features = new int[nNodes];
			childrenLeft = new int[nNodes];
			childrenRight = new int[nNodes];
			thresholds = new double[nNodes];
			values = new double[nNodes];
			for(int i = 0; i < nNodes; i++){
				features[i] = (int) (long)(Long) Jfeatures.get(i);
				childrenLeft[i] = (int) (long) (Long) JchildrenLeft.get(i);
				childrenRight[i] = (int) (long)(Long) JchildrenRight.get(i);
				values[i] = (Double) Jvalues.get(i);
				thresholds[i] = (Double) Jthresholds.get(i);
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ParseException e) {
			e.printStackTrace();
		}
		// Costruct the tree
		BaseTree baseTree = new BaseTree(features, childrenLeft, childrenRight, thresholds, values);
		DFEDecisionTree dt = new DFEDecisionTree(this, baseTree, dfeFloat(8, 24));
		// Collect the output
		DFEVar score = dt.decisionFunction(X);
		io.output("score", score, score.getType());
	}
}
