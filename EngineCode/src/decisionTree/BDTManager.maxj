package decisionTree;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

public class BDTManager extends CustomManager{

	public static void main(String[] args){
		EngineParameters params = new EngineParameters(args);

		// Read the BDT from the JSON file
		TreeReader reader = new TreeReader("/home/sioni/tmtt_analysis/fakereduction/bdtjson.txt");
		BDTParams p = reader.bdtParams();
		BDTParams bdtParams = new BDTParams(p.nTrees, p.nFeatures, p.learningRate, p.initPredict, DFETypeFactory.dfeFloat(8, 24), DFETypeFactory.dfeFix(7, 25, SignMode.TWOSCOMPLEMENT));
		BDTManager manager = new BDTManager(params, bdtParams, reader.baseTrees());
		manager.createSLiCinterface(interfaceDefault(bdtParams));
		manager.build();
	}

	public BDTManager(EngineParameters engineParams, BDTParams bdtParams, BaseTree[] baseTrees) {
		super(engineParams);
		getCurrentKernelConfig().debug.setEnableLatencyAnnotation(true);
		KernelBlock bdtKernel = addKernel(new BDTKernel(makeKernelParameters("BDTKernel"), bdtParams, baseTrees));
		DFELink[] X = new DFELink[bdtParams.nFeatures];
		for(int i = 0; i < bdtParams.nFeatures; i++){
			X[i] = addStreamFromCPU("X"+i);
			bdtKernel.getInput("X"+i) <== X[i];
		}

		DFELink score = addStreamToCPU("score");
		score <== bdtKernel.getOutput("score");
	}

	private static EngineInterface interfaceDefault(BDTParams bdtParams) {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes   type = CPUTypes.FLOAT;
		CPUTypes   tScore = CPUTypes.INT32;
		int        size = type.sizeInBytes();

		InterfaceParam N = engine_interface.addParam("N", CPUTypes.INT32);
		engine_interface.setTicks("BDTKernel", N);
		for(int i = 0; i < bdtParams.nFeatures; i++){
			engine_interface.setStream("X"+i,   type, N * size);
		}
		engine_interface.setStream("score",   tScore, N * size);
		return engine_interface;
	}
}
